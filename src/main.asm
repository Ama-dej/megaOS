.INCLUDE "m328pdef.inc"
.INCLUDE "interrupt.asm"

.CSEG
.EQU CPU_FREQ = 16000000
.EQU BAUD = 9600 
.EQU BPS = (CPU_FREQ / 16 / BAUD) - 1

.EQU RX_BUFFER_SIZE = 2^6 ; More bit potenca dvojke!!!!!

; TODO BACK SPACE, CR, NL (JAKOB)
START:
	CLI

	LDI R16, LOW(RAMEND)
	OUT SPL, R16
	LDI R16, HIGH(RAMEND)
	OUT SPH, R16

	LDI R16, LOW(BPS)
	LDI R17, HIGH(BPS)
	STS UBRR0L, R16
	STS UBRR0H, R17

	LDI R16, (1 << RXEN0) | (1 << TXEN0) | (1 << RXCIE0) | (1 << TXCIE0) | (1 << UDRIE0)
	STS UCSR0B, R16

	CLR R16
	STS TX_BUSY, R16
	STS WRITE_HEAD_L, R16
	STS READ_HEAD_L, R16

	SEI

; Kot primer je tle en napisan echo loop.
LOOP:
	CALL GETCHAR
	CPI R16, -1 
	BREQ LOOP

	CALL PUTCHAR
	RJMP LOOP

DONT_RESET:
	RJMP LOOP

HANG:
	RJMP HANG

; Pošlje znak v registru R16 po UART-u.
;
; R16 -> Znak, ki ga želimo poslati.
PUTCHAR:
	PUSH R17

PUTCHAR_WAIT:
	LDS R17, TX_BUSY
	CPI R17, 0 
	BRNE PUTCHAR_WAIT

	STS UDR0, R16

	LDI R17, 1 
	STS TX_BUSY, R17

	POP R17
	RET

; Dobi znak iz RX buffer-ja in ga da v R16.
; Zadevščina zna vrnit -1, kar pomeni da se write head in read head prekrivata (nimaš več kej za brat).
;
; R16 <- Znak, prebran iz RX buffer-ja. 
GETCHAR:
	PUSH R17
	PUSH XL
	PUSH XH

	LDS XL, READ_HEAD_L
	LDI XH, 0x01 

	LDS R17, WRITE_HEAD_L
	CP XL, R17
	BREQ GETCHAR_OVERLAP

	LD R16, X+
	ANDI XL, RX_BUFFER_SIZE - 1
	STS READ_HEAD_L, XL
	RJMP GETCHAR_OUT

GETCHAR_OVERLAP:
	LDI R16, -1 

GETCHAR_OUT:
	POP XH
	POP XL
	POP R17
	RET	

.DSEG
.ORG 0x0100
; Pred RX_BUFFER-jem mi ne vrivi nč.
RX_BUFFER: .BYTE RX_BUFFER_SIZE
; Tle naprej se lohk dela nove bufferje.
WRITE_HEAD_L: .BYTE 1
READ_HEAD_L: .BYTE 1
TX_BUSY: .BYTE 1

; .CSEG
; LOCI_UKAZ:
;	PUSH R16
;	PUSH XL
;	PUSH XH
;	PUSH YL
;	PUSH YH
;	LDI XL, LOW("BUFFER_ZACETEK")
;	LDI XH, HIGH("BUFFER_ZACETEK")
;	LDI YL, LOW(PARAMETER)
;	LDI YH, HIGH(PARAMETER)
;	LOCI:
;		LD R16, X+
;		CPI R16, 0x20
;		BRNE LOCI
;		INC X
;	LOCI2:
;		LD R16,X+
;		CPI R16, 0x00
;		BREQ VRNI
;		CPI R16, 0x20
;		BREQ LOCI2
;		ST Y+, R16
;		RJMP LOCI2
;	VRNI:
;		POP YH
;		POP YL
;		POP XH
;		POP XL
;		POP R16
;		RET
;
;
; .DSEG
; PARAMETER:  .BYTE 20
